trigger:
  - master
pr:
  - master

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: master
      endpoint: hmcts

parameters:
  - name: environment
    displayName: Environment to Deploy (dev default)
    type: string
    default: dev
    values:
      - dev
      - sbox
      - test1
      - preview
      - preprod
      - prod
         

variables:
  - name: prodEnv
    value: prod
  - name: preProdEnv
    value: preprod
  - group: vh-reporting-infra
  - ${{ if or(eq(variables.prodEnv, parameters.environment), eq(variables.preProdEnv, parameters.environment)) }}:
    - group: vh-reporting-infra-upper

stages:

  - stage: CIBuild
    displayName: 'Validate Infra'
    jobs: 
      - template: ado-pipeline/jobs/terraform-validate.yaml
        parameters:
          terraformPath: $(Build.SourcesDirectory)/infrastructure

  - stage: Plan
    displayName: Plan ${{ parameters.environment }}
    jobs:

      - template: ado-pipeline/jobs/terraform-plan.yaml
        parameters:
          subscription: $(subscription)
          environment: ${{ parameters.environment }}
          location: $(location)
          resourceGroup: $(resourceGroup)
          storageAccount: $(storageAccount)
          containerName: $(containerName)
          stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
          outputName: ${{ parameters.environment }}
          workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure

  - ${{ if ne(parameters.environment, 'dev') }}:        
    - stage: Wait
      jobs:
        - job: Wait
          displayName: "Wait for approval"
          pool: server
          steps:
            - template: ado-pipeline/steps/wait.yaml
              parameters:
                environment: ${{ parameters.environment }}
            
  - stage: Apply
    displayName: Apply ${{ parameters.environment }}
    ${{ if eq(parameters.environment, 'dev') }}:
      dependsOn: Plan
    ${{ else }}:
      dependsOn: Wait 
    jobs:
      - template: ado-pipeline/jobs/terraform-apply.yaml
        parameters:
          subscription: $(subscription)
          dependsOn: Wait
          location: $(location)
          environment: ${{ parameters.environment }}
          resourceGroup: $(resourceGroup)
          storageAccount: $(storageAccount)
          containerName: $(containerName)
          stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
          outputName: ${{ parameters.environment }}
          workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure

  - stage: ReportingDB
    displayName: Reporting DB Build
    dependsOn: Apply 
    jobs:
       
      - template: ado-pipeline/jobs/db-config.yaml
        parameters: 
          azureSubscription: $(subscription)
          environment: ${{ parameters.environment }}
          dbuser: $(dbuser)
          dbuserpass: $(dbuserpass${{ parameters.environment }})
          SqlFileName: '00_init.sql'

  - stage: ADF
    displayName: ADF Config
    dependsOn: Apply 
    jobs:
       
        - job: UpdateADFPipelines 
          displayName: Create/Update ADF-${{ parameters.environment }} datasets
          steps:
            - task: AzureCLI@2
              displayName: Update datasets
              inputs:
                azureSubscription: $(subscription)
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  az config set extension.use_dynamic_install=yes_without_prompt
                  $files=Get-ChildItem -Path "./dataset"
                  $environment="${{ parameters.environment }}"
                  
                  foreach ($file in $files){
                    $name= $file.name -replace ".json",""
                    $path= $file.fullName
                    $content=$($(Get-Content -Path $path) | ConvertFrom-Json).properties | ConvertTo-Json -Compress -Depth 100
                    $content = $content -replace "`"", "\`""

                    Write-Host "Creating/Updating Pipeline $name"
                    az datafactory dataset create --resource-group "vh-reporting-infra-$environment" --factory-name "vh-datafactory-$environment" --name "$name" --properties "$content"
                  }

            - task: AzureCLI@2
              displayName: Update ADF-${{ parameters.environment }} pipeines
              inputs:
                azureSubscription: $(subscription)
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |
                  az config set extension.use_dynamic_install=yes_without_prompt
                  $files=Get-ChildItem -Path "./pipeline"
                  $environment="${{ parameters.environment }}"
                  
                  foreach ($file in $files){
                    $name= $file.name -replace ".json",""
                    $path= $file.fullName
                    $content=$($(Get-Content -Path $path) | ConvertFrom-Json).properties | ConvertTo-Json -Compress -Depth 100
                    $content = $content -replace "`"", "\`""

                    Write-Host "Creating/Updating Pipeline $name"
                    az datafactory pipeline create --resource-group "vh-reporting-infra-$environment" --factory-name "vh-datafactory-$environment" --name "$name" --pipeline "$content"
                  }

            - task: AzureCLI@2
              displayName: Update ADF-${{ parameters.environment }} pipeline triggers
              inputs:
                azureSubscription: $(subscription)
                scriptType: pscore
                scriptLocation: inlineScript
                inlineScript: |  
                  az config set extension.use_dynamic_install=yes_without_prompt                
                  $files=Get-ChildItem -Path "./trigger"
                  $environment="${{ parameters.environment }}"
                  
                  foreach ($file in $files){
                    $name= $file.name -replace ".json",""
                    $path= $file.fullName
                    $content=$($(Get-Content -Path $path) | ConvertFrom-Json).properties | ConvertTo-Json -Compress -Depth 100
                    $content = $content -replace "`"", "\`""

                    Write-Host "Stop Trigger"
                    az datafactory trigger stop --factory-name "vh-datafactory-$environment" --resource-group "vh-reporting-infra-$environment" --name "$name"
                    Write-Host "Creating/Updating Trigger $name"
                    az datafactory trigger create --resource-group "vh-reporting-infra-$environment" --factory-name "vh-datafactory-$environment" --name "$name" --properties "$content" --debug
                  }
                
  - stage: Access
    displayName: Allow Access
    dependsOn: Apply
    jobs:
      - job:
        displayName: Database Access
        steps:
          - template: ado-pipeline/templates/private-endpoint-approval.yaml
            parameters:
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              resourceGroupName: "vh-core-infra-${{ parameters.environment }}"
              resourceName: "vh-core-infra-${{ parameters.environment }}"
              privateEndpointName: "vhadfendpoint"
          - template: ado-pipeline/templates/private-endpoint-approval.yaml
            parameters:
              subscription: "DTS-SHAREDSERVICES-${{ parameters.environment }}"
              environment: ${{ parameters.environment }}
              resourceGroupName: "vh-infra-core-${{ parameters.environment }}"
              resourceName: "vh-infra-core-${{ parameters.environment }}"
              privateEndpointName: "vhadfsdsendpoint"
      - job:
        displayName: Linked Services to MIs
        steps:
          - template: ado-pipeline/templates/create-credential.yaml
            parameters:
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
          - template: ado-pipeline/templates/link-credential.yaml
            parameters:
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              serviceName: "vhreporting-sds-kv-link"
          - template: ado-pipeline/templates/link-credential.yaml
            parameters:
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              serviceName: "vhreporting-kv-link"
